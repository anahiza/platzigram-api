{"version":3,"sources":["pictures-test.js"],"names":["beforeEach","t","srv","context","url","image","getImage","body","publicId","json","deepEqual","options","method","description","src","userId","resolveWithFullResponse","throws","token","signToken","secret","headers","response","is","statusCode","id","imageNew","JSON","parse","liked","likes","images","getImages","getImagesByTag"],"mappings":"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","file":"pictures-test.js","sourcesContent":["'use strict'\r\n\r\nimport test from 'ava'\r\nimport listen from 'test-listen'\r\nimport request from 'request-promise'\r\nimport pictures from '../pictures'\r\nimport micro from 'micro'\r\nimport fixtures from './fixtures/'\r\nimport utils from '../lib/utils'\r\nimport config from '../config'\r\n\r\ntest.beforeEach(async t => {\r\n  let srv = micro(pictures)\r\n  t.context.url = await listen(srv)\r\n})\r\n\r\ntest('GET /:id', async t => {\r\n  let image = fixtures.getImage()\r\n  let url = t.context.url\r\n  let body = await request({ url: `${url}/${image.publicId}`, json: true })\r\n  t.deepEqual(body, image)\r\n})\r\n\r\ntest('no token POST /', async t => {\r\n  let image = fixtures.getImage()\r\n  let url = t.context.url\r\n  let options = {\r\n    method: 'POST',\r\n    url: url,\r\n    json: true,\r\n    body: {\r\n      description: image.description,\r\n      src: image.src,\r\n      userId: image.userId\r\n    },\r\n    resolveWithFullResponse: true\r\n  }\r\n  t.throws(request(options), /invalid token/)\r\n})\r\n\r\ntest('secure POST /', async t => {\r\n  let image = fixtures.getImage()\r\n  let url = t.context.url\r\n  let token = await utils.signToken({userId: image.userId}, config.secret)\r\n  let options = {\r\n    method: 'POST',\r\n    url: url,\r\n    json: true,\r\n    body: {\r\n      description: image.description,\r\n      src: image.src,\r\n      userId: image.userId\r\n    },\r\n    headers: {\r\n      'Authorization': `Bearer ${token}`\r\n    },\r\n    resolveWithFullResponse: true\r\n  }\r\n  let response = await request(options)\r\n  t.is(response.statusCode, 201)\r\n  t.deepEqual(response.body, image)\r\n})\r\n\r\ntest('invalid token POST /', async t => {\r\n  let image = fixtures.getImage()\r\n  let url = t.context.url\r\n  let token = await utils.signToken({userId: 'hacky'}, config.secret)\r\n  let options = {\r\n    method: 'POST',\r\n    url: url,\r\n    json: true,\r\n    body: {\r\n      description: image.description,\r\n      src: image.src,\r\n      userId: image.userId\r\n    },\r\n    headers: {\r\n      'Authorization': `Bearer ${token}`\r\n    },\r\n    resolveWithFullResponse: true\r\n  }\r\n  t.throws(request(options), /invalid token/)\r\n})\r\n\r\ntest('POST /:id/like', async t => {\r\n  let image = fixtures.getImage()\r\n  let url = t.context.url\r\n  let options = {\r\n    method: 'POST',\r\n    url: `${url}/${image.id}/like`,\r\n    json: true\r\n  }\r\n  let body = await request(options)\r\n  let imageNew = JSON.parse(JSON.stringify(image))\r\n  imageNew.liked = true\r\n  imageNew.likes = 1\r\n  t.deepEqual(body, imageNew)\r\n})\r\n\r\ntest('GET /list', async t => {\r\n  let images = fixtures.getImages()\r\n  let url = t.context.url\r\n  let options = {\r\n    method: 'GET',\r\n    url: `${url}/list`,\r\n    json: true\r\n  }\r\n  let body = await request(options)\r\n  t.deepEqual(body, images)\r\n})\r\n\r\ntest('GET /tag/:tag', async t => {\r\n  let images = fixtures.getImagesByTag()\r\n  let url = t.context.url\r\n  let options = {\r\n    method: 'GET',\r\n    url: `${url}/tag/awesome`,\r\n    json: true\r\n  }\r\n  let body = await request(options)\r\n  t.deepEqual(body, images)\r\n})\r\n"]}